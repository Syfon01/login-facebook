{"ast":null,"code":"async function PostWithAuth(route, data) {\n  const authUser = JSON.parse(localStorage[\"_authuser\"]);\n  const token = authUser ? authUser.userData.token : \"\";\n  return fetch(\"https://team-trion.herokuapp.com\".concat(route), {\n    method: 'POST',\n    mode: 'cors',\n    cache: 'no-cache',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify(data)\n  });\n}\n\nasync function getWithAuth(route) {\n  const authUser = JSON.parse(localStorage[\"_authuser\"]);\n  const token = authUser ? authUser.userData.token : \"\";\n  return fetch(\"https://team-trion.herokuapp.com\".concat(route), {\n    method: 'GET',\n    mode: 'cors',\n    cache: 'no-cache',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    }\n  });\n}\n\nasync function signIn({\n  username,\n  password\n}) {\n  return new Promise(async resolve => {\n    try {\n      const response = await fetch(\"https://team-trion.herokuapp.com/login/\", {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      let status = response.status;\n      const data = await response.json();\n\n      if (status === 201 || status === 200) {\n        const token = data.token;\n        const payload = {\n          isLoggedIn: true,\n          userData: {\n            username,\n            token\n          }\n        };\n        resolve(payload);\n      }\n    } catch (error) {}\n  });\n}\n\nexport { PostWithAuth, getWithAuth, signIn };","map":{"version":3,"sources":["C:\\laragon\\www\\team-triton-finance_tracker_app\\frontend\\src\\utils\\APIRequest.js"],"names":["PostWithAuth","route","data","authUser","JSON","parse","localStorage","token","userData","fetch","method","mode","cache","headers","body","stringify","getWithAuth","signIn","username","password","Promise","resolve","response","status","json","payload","isLoggedIn","error"],"mappings":"AAGA,eAAeA,YAAf,CAA4BC,KAA5B,EAAmCC,IAAnC,EAAyC;AAErC,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAAC,WAAD,CAAvB,CAAjB;AACA,QAAMC,KAAK,GAAIJ,QAAQ,GAAGA,QAAQ,CAACK,QAAT,CAAkBD,KAArB,GAA6B,EAApD;AAEA,SAAOE,KAAK,2CAAoCR,KAApC,GAA4C;AACpDS,IAAAA,MAAM,EAAE,MAD4C;AAEpDC,IAAAA,IAAI,EAAE,MAF8C;AAGpDC,IAAAA,KAAK,EAAE,UAH6C;AAIpDC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAiB,YAAWN;AAFvB,KAJ2C;AAQpDO,IAAAA,IAAI,EAAEV,IAAI,CAACW,SAAL,CAAeb,IAAf;AAR8C,GAA5C,CAAZ;AAUH;;AAED,eAAec,WAAf,CAA2Bf,KAA3B,EAAkC;AAE9B,QAAME,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAAC,WAAD,CAAvB,CAAjB;AACA,QAAMC,KAAK,GAAIJ,QAAQ,GAAGA,QAAQ,CAACK,QAAT,CAAkBD,KAArB,GAA6B,EAApD;AAEA,SAAOE,KAAK,2CAAoCR,KAApC,GAA4C;AACpDS,IAAAA,MAAM,EAAE,KAD4C;AAEpDC,IAAAA,IAAI,EAAE,MAF8C;AAGpDC,IAAAA,KAAK,EAAE,UAH6C;AAIpDC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAiB,YAAWN;AAFvB;AAJ2C,GAA5C,CAAZ;AASH;;AAED,eAAeU,MAAf,CAAsB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAtB,EAA6C;AACzC,SAAO,IAAIC,OAAJ,CAAY,MAAOC,OAAP,IAAiB;AAChC,QAAG;AACC,YAAMC,QAAQ,GAAG,MAAMb,KAAK,CAAC,yCAAD,EAA2C;AAC/DC,QAAAA,MAAM,EAAE,MADuD;AAE/DC,QAAAA,IAAI,EAAE,MAFyD;AAG/DC,QAAAA,KAAK,EAAE,UAHwD;AAI/DC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAJsD;AAO/DC,QAAAA,IAAI,EAAEV,IAAI,CAACW,SAAL,CAAe;AACnBG,UAAAA,QADmB;AAEnBC,UAAAA;AAFmB,SAAf;AAPyD,OAA3C,CAA5B;AADD,UAaWI,MAbX,GAasBD,QAbtB,CAaWC,MAbX;AAcK,YAAMrB,IAAI,GAAG,MAAMoB,QAAQ,CAACE,IAAT,EAAnB;;AAEA,UAAGD,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAhC,EAAqC;AAAA,cACzBhB,KADyB,GACfL,IADe,CACzBK,KADyB;AAEjC,cAAMkB,OAAO,GAAG;AACZC,UAAAA,UAAU,EAAC,IADC;AAEZlB,UAAAA,QAAQ,EAAC;AACLU,YAAAA,QADK;AAELX,YAAAA;AAFK;AAFG,SAAhB;AAOAc,QAAAA,OAAO,CAACI,OAAD,CAAP;AACH;AACJ,KA3BL,CA2BM,OAAOE,KAAP,EAAc,CAEf;AACR,GA/BM,CAAP;AAgCH;;AAED,SACI3B,YADJ,EAEIgB,WAFJ,EAGIC,MAHJ","sourcesContent":["\r\n\r\n\r\nasync function PostWithAuth(route, data) {\r\n\r\n    const authUser = JSON.parse(localStorage[\"_authuser\"]);\r\n    const token =  authUser ? authUser.userData.token : \"\";\r\n\r\n    return fetch(`https://team-trion.herokuapp.com${route}`,{\r\n        method: 'POST', \r\n        mode: 'cors', \r\n        cache: 'no-cache',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer '+ token\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n}\r\n\r\nasync function getWithAuth(route) {\r\n\r\n    const authUser = JSON.parse(localStorage[\"_authuser\"]);\r\n    const token =  authUser ? authUser.userData.token : \"\";\r\n\r\n    return fetch(`https://team-trion.herokuapp.com${route}`,{\r\n        method: 'GET', \r\n        mode: 'cors', \r\n        cache: 'no-cache',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer '+ token\r\n        }\r\n    });\r\n}\r\n\r\nasync function signIn({ username, password }){\r\n    return new Promise(async (resolve)=>{\r\n        try{\r\n            const response = await fetch(\"https://team-trion.herokuapp.com/login/\",{\r\n                    method: 'POST', \r\n                    mode: 'cors', \r\n                    cache: 'no-cache',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                      username,\r\n                      password\r\n                    })\r\n                  });\r\n                let { status } = response;\r\n                const data = await response.json();\r\n    \r\n                if(status === 201 || status === 200 ){\r\n                    const { token } = data;\r\n                    const payload = {\r\n                        isLoggedIn:true,\r\n                        userData:{\r\n                            username,\r\n                            token\r\n                        }\r\n                    }\r\n                    resolve(payload);\r\n                }\r\n            } catch (error) {\r\n                \r\n            }\r\n    })\r\n}\r\n\r\nexport{\r\n    PostWithAuth,\r\n    getWithAuth,\r\n    signIn\r\n} \r\n"]},"metadata":{},"sourceType":"module"}